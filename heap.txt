
void	check_chr(char *path)
{
	int		fd;
	int		i;
	char	*line;

	line = NULL;
//	fd = open(path, O_RDONLY);
//	if (fd < 0)
//		exit (0);
	fd = fd_open(path);
	while (fd > 0)
	{
		i = 0;
		line = get_next_line(fd);
		if (!line)
			break ;
		while (line[i] && line[i] != '\n')
		{
			if (line[i] != '1' && line[i] != '0' && line[i] != 'P' && line[i] \
			!= 'E' && line[i] != 'C')
			{
				write(1, "check character! \n", 17);
				exit (0);
			}
			i++;
		}
		free(line);
	}
}

void	check_size_map(char *path, t_data **vars)
{
	int		fd;
	char	*line;
	int		j;
	int		length;

	*vars = malloc(sizeof(t_data));
	line = NULL;
	fd = open(path, O_RDONLY);
	if (fd < 0)
		exit(0);
	j = 0;
	line = get_next_line(fd);
	free(line);
	(*vars)->win_draw.x = ft_strlen(line) - 1;
	while (line)
	{
		if (line != NULL)
		{
			if (line[ft_strlen(line) - 1] == '\n')
				length = ft_strlen(line) - 1;
			else
				length = ft_strlen(line);
			if ((*vars)->win_draw.x != length)
			{
				write(1, "check line length!\n", 19);
				exit(0);
			}
			line = get_next_line(fd);
			free(line);
		}
		j++;
	}
	(*vars)->win_draw.y = j;
}

***********draw.c***********
#include "../inc/so_long.h"
#include "../inc/get_next_line.h"

void	draw(char *path, t_data **vars)
{
	void	*chr;
	int		x;
	int		y;

	x = 0;
	y = 0;
	chr = mlx_xpm_file_to_image((*vars)->mlx, path, &x, &y);
	mlx_put_image_to_window((*vars)->mlx, (*vars)->win, \
	chr, (*vars)->win_draw.x, (*vars)->win_draw.y);
}

void	draw_box(char box, t_data **vars, int i, int j)
{
	if (box == '1')
		draw("./xpm/wall_50_50.xpm", vars);
	else if (box == '0')
		draw("./xpm/ground.xpm", vars);
	else if (box == 'C')
	{
		draw("./xpm/c_50_50.xpm", vars);
		(*vars)->chr.collect += 1;
	}
	else if (box == 'E')
	{
		draw("./xpm/close_50_50.xpm", vars);
	}
	else if (box == 'e')
		draw("./xpm/open_50_50.xpm", vars);
	else if (box == 'P')
	{
		(*vars)->pos_player.x = j;
		(*vars)->pos_player.y = i;
		draw("./xpm/p_50_50.xpm", vars);
	}
	else if (box == 'A')
		draw("./xpm/a_50_50.xpm", vars);
}

void	map2(char	**file_map, t_data	**vars)
{
	int		i;
	int		j;
	//char	*str;
	//char	*score;

	//str = NULL;
	i = 0;
	(*vars)->win_draw.y = 0;
	(*vars)->chr.collect = 0;
	while (file_map[i])
	{
		(*vars)->win_draw.x = 0;
		j = 0;
		while (file_map[i][j])
		{
			draw_box(file_map[i][j], vars, i, j);
			j++;
			(*vars)->win_draw.x += 50;
		}
		(*vars)->win_draw.y += 50;
		i++;
	}
}

void	map(char **file_map, t_data **vars)
{
	//int		i;
	//int		j;
	char	*str;
	char	*score;

	str = NULL;
	map2(file_map,vars);
	//i = 0;
	//(*vars)->win_draw.y = 0;
	//(*vars)->chr.collect = 0;
//	while (file_map[i])
//	{
//		(*vars)->win_draw.x = 0;
//		j = 0;
//		while (file_map[i][j])
//		{
//			draw_box(file_map[i][j], vars, i, j);
//			j++;
//			(*vars)->win_draw.x += 50;
//		}
//		(*vars)->win_draw.y += 50;
//		i++;
//	}
	//print_score(vars); //
	score = ft_itoa((*vars)->score);
	str = ft_strjoin2("moves: ", score);
	free(score);
	mlx_string_put((*vars)->mlx, (*vars)->win, 10, 10, 1, str);
	free(str);
}

//char	*print_score(t_data **vars)
//{
//	char *score;
//	char *str;
//
//	str = NULL;
//	score = ft_itoa((*vars)->score);
//	str = ft_strjoin("moves: ", score);
//	free(score);
//	mlx_string_put((*vars)->mlx, (*vars)->win, 10, 10, 1, str);
//	free(str);
//}